// Grid - uses flexbox

// **** remove the below once flex grid is done **** //

// ------ variables ------ //
$row-width: 1240px !default; // 1440px // forces max-width use rem-calc(1000) - or 100% for full screen width
$column-gutter: 1rem !default;
$total-columns: 12 !default;

// Media Query Ranges
$small-range: (0em, 40em); // 0, 640px
$medium-range: (40.063em, 64em); // 641px, 1024px
$large-range: (64.063em, 90em); // 1025px, 1440px
// $xlarge-range: (90.063em, 120em); // 1441px, 1920px
// $xxlarge-range: (120.063em); // 1921px

$screen: "only screen" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

// $xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
// $xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

// $xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
// $xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

$text-direction: ltr !default;
$default-float: left !default;
$opposite-direction: right !default;

@if $text-direction == ltr {
  $default-float: left;
  $opposite-direction: right;
} @else {
  $default-float: right;
  $opposite-direction: left;
}

// ------ Grid Functions ------ //

@function grid-calc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

// ------ Mixins ------ //
// For creating container, nested, and collapsed rows.
// Default: false. Options: nest, collapse, nest-collapse, false.
// use @include grid-row(abover-options);
@mixin grid-row($behavior: false) {
  @if $behavior == nest {
    width: auto;
    margin-#{$default-float}: -($column-gutter/2);
    margin-#{$opposite-direction}: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  }
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }
  @else {
    width: 100%;
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;
  }
  @include clearfix();
}

// ----- Creates column ------ // 
// should be used inside of a media query to control layouts
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
  $columns:false,
  $last-column:false,
  $collapse:false,
  $float:true) {
  // If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }
  // Gutter padding whenever a column isn't set to collapse
  // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }
  // If a column number is given, calculate width
  @if $columns {
    width: grid-calc($columns, $total-columns);
    // If last column, float naturally instead of to the right
    @if $last-column { float: $opposite-direction; }
  }
  @if $float {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }
}

// ------ Create presentational classes for grid ------ //
// $size - Name of class .l-1, .l-2, etc.
@mixin grid-html-classes($size) {
  @for $i from 1 through $total-columns {
    .#{$size}#{-$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
  }
  [class*="col"] + [class*="col"]:last-child { float: $opposite-direction; }
  [class*="col"] + [class*="col"].end { float: $default-float; }
}

// ------ Prints grid ------ //
.row {
  @include grid-row;
  &.collapse {
     > .col { @include grid-column($collapse:true); }
    .row {margin-left:0; margin-right:0;}
  }
  .row { @include grid-row($behavior:nest);
    &.collapse { @include grid-row($behavior:nest-collapse); }
  }
}

.col {
  @include grid-column($columns:$total-columns);
  position: relative;
}

@media #{$small-up}  { @include grid-html-classes($size:s); }
@media #{$medium-up} { @include grid-html-classes($size:m); }
@media #{$large-up}  { @include grid-html-classes($size:l); }
// @media #{$xlarge-up} { @include grid-html-classes($size:xl); }
// @media #{$xxlarge-up} { @include grid-html-classes($size:xxl); }